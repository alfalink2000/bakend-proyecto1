const express = require("express");
const router = express.Router();
const { validarJWT } = require("../middlewares/revalidar-jwt");

// ‚úÖ IMPORTAR MODELO Y CONTROLADORES CORRECTAMENTE
const AppConfig = require("../models/AppConfig"); // ‚úÖ AGREGAR ESTA L√çNEA
const {
  getAppConfig,
  updateAppConfig,
} = require("../controllers/appConfigController");

// ‚úÖ RUTA P√öBLICA (para el cliente) - CORREGIDA
router.get("/public", async (req, res) => {
  try {
    console.log("üîß Solicitando configuraci√≥n p√∫blica...");
    console.log("üîç AppConfig model:", !!AppConfig);

    // Verificar conexi√≥n a BD
    const { db } = require("../database/connection");
    await db.authenticate();
    console.log("‚úÖ BD conectada");

    let config = await AppConfig.findOne();
    console.log("üîç Config encontrada:", !!config);

    if (!config) {
      console.log("‚ö†Ô∏è  No hay configuraci√≥n, creando por defecto...");
      try {
        config = await AppConfig.create({
          app_name: "Minimarket Digital",
          app_description: "Tu tienda de confianza",
          theme: "blue",
          whatsapp_number: "+5491112345678",
          business_hours: "Lun-Vie: 8:00 - 20:00",
          business_address: "Av. Principal 123",
          logo_url: null,
          currency: "USD",
          language: "es",
        });
        console.log("‚úÖ Configuraci√≥n por defecto creada");
      } catch (createError) {
        console.error("‚ùå Error creando configuraci√≥n:", createError);
        throw createError;
      }
    }

    console.log("‚úÖ Configuraci√≥n p√∫blica enviada:", config.app_name);

    res.json({
      ok: true,
      config: {
        app_name: config.app_name,
        app_description: config.app_description,
        theme: config.theme,
        currency: config.currency,
        language: config.language,
        logo_url: config.logo_url,
        whatsapp_number: config.whatsapp_number,
        business_hours: config.business_hours,
        business_address: config.business_address,
      },
    });
  } catch (error) {
    console.error("‚ùå Error completo en /public:", error);
    console.error("‚ùå Stack:", error.stack);
    res.status(500).json({
      ok: false,
      msg: "Error interno del servidor",
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
});

// ‚úÖ RUTA PROTEGIDA PARA OBTENER CONFIGURACI√ìN (admin)
router.get("/", validarJWT, getAppConfig);

// ‚úÖ RUTA PARA ACTUALIZAR CONFIGURACI√ìN
router.put("/", validarJWT, updateAppConfig);

module.exports = router;
